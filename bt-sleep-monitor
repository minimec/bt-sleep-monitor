#!/bin/bash
#title           : bt-sleep-monitor-ng.sh
#description     : Bluetooth 'LowPowerMode' monitor for SailfishOS ports that face a bluetooth wakelock bug.
#author          : minimec
#date            : 20171001
#version         : 0.6 ('next generation')
#usage           : Usage: bt-sleep-monitor {start|stop|status|restart} &
#notes           : Best use as systemd service
#==============================================================================
#How it works... : LowPowerMode is disabled in two cases:
#                    - by enabling the bluetooth adapter, in case it is 'disabled'.
#                    - by powering on the display, in case the adapter is 'enabled'.
#                  The script switches between these modes automatically.
#                  After an 'action' is triggered you have 120sec. (default value) to connect a device.
#                  In case a device is connected, the script listens for 'disconnect' and will enable LPM again afterwards.
#==============================================================================

## tmp file
touch /tmp/sleeplock

## Variables
BTACTIVE=60
BTPOWER=$(connmanctl technologies | sed -n -e '/bluetooth/,+5p' | grep Powered | awk '{print $3; exit}')
BTCONNECT=$(hcitool con | grep ACL)
SLEEPLOCK=$(cat /tmp/sleeplock)

## Functions
bluepower() {
    if [ "$BTPOWER" == "True" ] ; then
        echo "0" > /proc/bluetooth/sleep/lpm
        printf "bluepower 'on' (suspend 'off' for $BTACTIVE seconds) \n"
        sleeplock &
    else
        echo "1" > /proc/bluetooth/sleep/lpm
        printf "bluepower 'off' (suspend 'on') \n"
    fi
}

blueconnect() {
    sleep 2
    if  [ "$(hcitool con | grep ACL)" == "" ] ; then
        echo "1" > /proc/bluetooth/sleep/lpm
        printf "blueconnect 'device removed' (suspend 'on') \n"
    else
        printf "blueconnect 'device connected' \n"
    fi 
}

display() {
    if [ "$BTPOWER" == "True" ] && [ "$BTCONNECT" == "" ] && [ "$SLEEPLOCK" == "False" ] ; then
        echo "0" > /proc/bluetooth/sleep/lpm
        printf "display 'event' (suspend 'off' for $BTACTIVE seconds) \n" 
        sleeplock &
    else
        printf "display 'event' (ignored) \n"
    fi     
}

sleeplock() {
    echo "True" > /tmp/sleeplock
    sleep $BTACTIVE
    if  [ "$(hcitool con | grep ACL)" == "" ] ; then
        echo "1" > /proc/bluetooth/sleep/lpm
        printf "sleeplock 'no connection after $BTACTIVE seconds' (suspend 'on') \n"
        echo "False" > /tmp/sleeplock
    else
        echo "False" > /tmp/sleeplock
    fi
    exit 0
}

dbuslisten() {
    # Create PID-file
    echo $(pidof bt-sleep-monitor) > /var/run/bt-sleep-monitor.pid 

    # Dbus listener
    WATCH1="path='/net/connman/technology/bluetooth',interface='net.connman.Technology',member='SetProperty'"
    WATCH2="interface='org.bluez.Control',member='PropertyChanged'"
    WATCH3="interface='org.bluez.Device',member='PropertyChanged'"
    WATCH4="interface='com.nokia.mce.signal',member='display_status_ind'"

    dbus-monitor --system "${WATCH1}" "${WATCH2}" "${WATCH3}" "${WATCH4}" | \
    awk '
    /member=SetProperty/ { system("'$0' --bluepower") }
    /member=PropertyChanged/ { system("'$0' --blueconnect") }
    /member=display_status_ind/ { system("'$0' --display") }
    '
    }

start() {
    echo "1" > /proc/bluetooth/sleep/lpm
    echo "False" > /tmp/sleeplock
    printf "\nBluetooth Sleep Monitor started (suspend 'on')\n"
    dbuslisten &
}

stop() {
    pkill -P $(cat /var/run/bt-sleep-monitor.pid) && rm /var/run/bt-sleep-monitor.pid
    echo "0" > /proc/bluetooth/sleep/lpm
    echo "False" > /tmp/sleeplock
    printf "\nBluetooth Sleep Monitor stopped (suspend 'off')\n"
}

restart() {
    $0 stop
    $0 start &
}

status() {
    if [ -e /var/run/bt-sleep-monitor.pid ]; then
       echo Bluetooth Sleep Monitor is running, pid=`cat /var/run/bt-sleep-monitor.pid`
    else
       echo Bluetooth Sleep Monitor is NOT running
       exit 1
    fi
}


## Main

# check for a command switch and call different functionality if it is found
if [[ $# -eq 1 && $1 == "--bluepower" ]]; then
    bluepower
elif [[ $# -eq 1 && $1 == "--blueconnect" ]]; then
    blueconnect
elif [[ $# -eq 1 && $1 == "--display" ]]; then
    display
elif [[ $# -eq 1 && $1 == "--sleeplock" ]]; then
    sleeplock
elif [[ $# -eq 1 && $1 == "start" ]]; then
    start
elif [[ $# -eq 1 && $1 == "stop" ]]; then
    stop
elif [[ $# -eq 1 && $1 == "status" ]]; then
    status
elif [[ $# -eq 1 && $1 == "restart" ]]; then
    restart

else
    echo "Usage: $0 {start|stop|status|restart}"
fi
